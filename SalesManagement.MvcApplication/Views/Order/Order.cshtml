
@using System.Globalization
@using Model
@using SalesManagement.MvcApplication
@using SalesManagement.MvcApplication.ViewModels
@model SalesManagement.MvcApplication.ViewModels.Order.OrderViewModel

@{
    string title = null;
    string actionName = null;
    string notification = null;
    string buttonTitle = null;
    string linkText = String.Empty;
    switch (Model.ActionType)
    {
        case ActionType.Create:
            title = "Register order";
            actionName = "Create";
            notification = "Order registration";
            buttonTitle = "Register";
            linkText = "← To the orders list";
            break;
        case ActionType.Edit:
            title = "Edit order";
            actionName = "Edit";
            notification = "Order editing";
            buttonTitle = "Save";
            linkText = "← Back to the orders list";
            break;
    }
    ViewBag.Title = GlobalConstants.TitlePrefix + title;
}
@section Head
{
    <link rel="stylesheet" type="text/css" href="~/Content/Stylesheets/Order/Order.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/Stylesheets/_Shared/_PopupWindow.css"/>
    <link rel="stylesheet" type="text/css" href="~/Content/Stylesheets/jquery-ui-1.10.3.custom.css"/>
}

@section MainContent{
    @Html.MvcSiteMap().SiteMapPath()
    <h2>
        @notification
    </h2>

    @Html.ActionLink(linkText, "My")
    @using (Html.BeginForm(actionName, "Order", FormMethod.Post))
    {
        <div class="separate chooseArea">
            <h3>Choose client</h3>
            <div class="separate left half">
                <h4>by Unique Id</h4>
                @Html.TextBoxFor(m => m.ClientUniqueId,new {@class="model"})
                <img id="uniqueIdExists"  class="validation" width="25" height="25" src="~/Content/Images/cross.png" alt="" />
                <label id="uniqueIdNotification" class="validation">Wrong client id</label>
                @Html.ValidationMessageFor(m => m.ClientUniqueId)
            </div>
            
            <div class="separate right half">
                <h4>by Full name</h4>
                @Html.Label("First name")
                <input type="text" id="clientFirstName" /><br />
                @Html.Label("Last name")
                <input type="text" id="clientLastName" />
            </div>
        </div>
        
        <div class="clearBoth">&nbsp;</div>
        <div id="matchingClients" class="hidden"></div>
        <div class="separate chooseArea">
            <h3>Choose product</h3>
            <div class="separate left half">
                <h4>by SKU</h4>
                @Html.TextBoxFor(m => m.ProductSku,new {@class="model"})
                <img id="skuExists"  class="validation" width="25" height="25" src="~/Content/Images/cross.png" alt=""/>
                <label id="skuNotification" class="validation">Wrong product SKU</label>
                @Html.ValidationMessageFor(m => m.ProductSku)
            </div>
            <div class="separate right half">
                <h4>by Name</h4>
                <input type="text" id="productName"/>
            </div>
        </div>
        <div class="clearBoth">&nbsp;</div>
        <div id="matchingProducts" class="hidden"></div>
        
        <div class="separate chooseArea">
            <h3>Specify amount</h3>
            <div class="separate left">
                @Html.TextBoxFor(m => m.Amount,new {@class="model"})
                <img id="amountLeftWarning" class="validation" width="25" height="25" src="~/Content/Images/attention.png" alt=""/>
                <label id="amountLeftNotification" class="validation">Only <span id="amountLeftNumber"></span> left</label>
                <label id="amountWrongNotification" class="validation"></label>
                @Html.ValidationMessageFor(m => m.Amount)
            </div>
        </div>
        
        <div class="separate chooseArea">
            <h3>Specify delivery information</h3>
            <div class="separate left">
                @Html.Label("Delivery date")<br />
                @Html.TextBoxFor(m => m.DeliveryDate,new {@class="model", @Value=Model.DeliveryDate==null? null:Model.DeliveryDate.Value.ToString(GlobalConstants.DateTimeFormat)})
                <img id="dateIsAfterYesterday" class="validation" width="25" height="25" src="~/Content/Images/cross.png" alt=""/>
                <label id="dateNotification" class="validation">Delivery date can't be before today</label>
                @Html.ValidationMessageFor(m => m.DeliveryDate)
            </div>
        
            <div class="separate left">
                @Html.Label("Delivery address")<br />
                @Html.TextBoxFor(m => m.DeliveryAddress,new {@class="model"})
                @Html.ValidationMessageFor(m => m.DeliveryAddress)
            </div>
        
            <div class="separate left">
                @Html.Label("Contact phone number")<br />
                +@Html.TextBoxFor(m => m.ContactPhoneNumber,new {@class="model"})
                @Html.ValidationMessageFor(m => m.ContactPhoneNumber)
            </div>
        </div>
        
        if (Model.ActionType == ActionType.Edit && User.IsInRole(RoleNames.AdministratorRoleName))
         {
            <div class="separate chooseArea">
                <h3>Chose status</h3>
                <div class="separate left">
                    @Html.Label("Status")<br />
                    @Html.RadioButtonFor(m => m.Status, OrderStatus.Unpaid, new {@checked = true, id = "rbnUnpaid"})
                    @Html.Label("Unpaid", new {@for = "rbnUnpaid"})<br />
                    @Html.RadioButtonFor(m => m.Status, OrderStatus.Paid, new {id = "rbnPaid"})
                    @Html.Label("Paid", new {@for = "rbnPaid"})<br />
                    @Html.RadioButtonFor(m => m.Status, OrderStatus.Delivered, new {id = "rbnDelivered"})
                    @Html.Label("Delivered", new {@for = "rbnDelivered"})<br />
                    @Html.RadioButtonFor(m => m.Status, OrderStatus.Refused, new {id = "rbnRefused"})
                    @Html.Label("Refused", new {@for = "rbnRefused"})
                </div>
            </div>
         }

        @Html.HiddenFor(m => m.ActionType,new {@class="model"})
        @Html.HiddenFor(m => m.OldAmount,new {@class="model"})
        @*@Html.HiddenFor(m=>m.ValidationOnly,new {@class="model"})*@
        @Html.HiddenFor(m=>m.Id)
        @Html.HiddenFor(m=>m.Price)

        
        
        <div class="separate">
            <button type="button" id="fakeSubmit">@buttonTitle</button>
            <button type="submit" id="submit" class="hidden"></button>
            @*<button type="submit" id="submit"></button>*@
        </div>
        
        <div id="popupSummaryWrapper" class="hidden"></div>
    }
    <script type="text/javascript" src="~/Scripts/jQuery.1.10.2.js"></script>
    <script type="text/javascript" src="~/Scripts/jQuery-ui.1.10.3.js"></script>
    <script type="text/javascript" src="~/Scripts/Order/Order.js"></script>
@*    <script type="text/javascript" src="~/Scripts/Order/_Client.js"></script>
    <script type="text/javascript" src="~/Scripts/Product/_Product.js"></script>
    <script type="text/javascript" src="~/Scripts/_Shared/_PopupWindow.js"></script>*@
}